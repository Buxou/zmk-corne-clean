/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&led_strip { chain-length = <27>; };

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&mt GRAVE ESCAPE  &kp Q  &kp W  &kp E      &kp R            &kp T          &kp Y        &kp U                &kp I         &kp O    &kp P     &mt RIGHT_BRACKET LEFT_BRACKET
&kp LCTRL         &kp A  &kp S  &kp D      &kp F            &kp G          &kp H        &kp J                &kp K         &kp L    &kp SEMI  &mt RCTRL SQT
&kp LALT          &kp Z  &kp X  &kp C      &kp V            &kp B          &kp N        &kp M                &kp COMMA     &kp DOT  &kp FSLH  &mt RIGHT_ALT BACKSLASH
                                &lt 2 TAB  &mt LSHFT ENTER  &lt 1 SPACE    &lt 1 SPACE  &mt RSHFT BACKSPACE  &lt 2 DELETE
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp UNDERSCORE     &kp F1           &kp F2       &kp F3    &kp F4      &kp F5         &kp F6     &kp F7         &kp F8        &kp F9                &kp F10                &kp F11
&mt LCTRL KP_PLUS  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT    &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &mt RCTRL MINUS
&mt LALT MINUS     &kp N1           &kp N2       &kp N3    &kp N4      &kp N5         &kp N6     &kp N7         &kp N8        &kp N9                &kp N0                 &kp EQUAL
                                                 &mo 3     &trans      &trans         &trans     &trans         &mo 3
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp KP_NUMLOCK      &kp KP_DIVIDE    &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS    &kp C_VOLUME_UP  &kp HOME  &kp PRINTSCREEN  &kp PG_UP  &kp SCROLLLOCK   &kp CLCK
&mt LCTRL KP_EQUAL  &kp KP_MULTIPLY  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS     &kp C_MUTE       &kp LEFT  &kp UP           &kp RIGHT  &kp INS          &mt RCTRL K_CONTEXT_MENU
&trans              &kp KP_N0        &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_DOT      &kp C_VOL_DN     &kp END   &kp DOWN         &kp PG_DN  &kp PAUSE_BREAK  &trans
                                                &trans     &trans     &mo 3           &mo 3            &trans    &trans
            >;
        };

        adj_layer {
            bindings = <
&sys_reset       &bootloader      &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3    &bt BT_SEL 3  &bt BT_SEL 2     &bt BT_SEL 1     &bt BT_SEL 0     &bootloader      &sys_reset
&rgb_ug RGB_EFF  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &bt BT_CLR      &bt BT_CLR    &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_EFF
&rgb_ug RGB_TOG  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &kp K_SLEEP     &kp K_SLEEP   &rgb_ug RGB_SPD  &rgb_ug RGB_BRD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_TOG
                                                   &trans           &trans           &trans          &trans        &trans           &trans
            >;
        };
    };
};
